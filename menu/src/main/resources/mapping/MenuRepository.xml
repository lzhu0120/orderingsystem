<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace:命名空间,做sql隔离 ，访问sql语句时，sql的id前面要带着命名空间-->
<mapper namespace="com.lin.repository.MenuRepository">

    <!--
    id:sql语句唯一标识，不能重复。
    parameterType:属性指明查询时使用的参数类型
    resultType:属性指明查询返回的结果集类型。resultType="com.mq.pojo.Student"表示返回值是Student类型
    #{}占位符:起到占位作用,如果传入的是基本类型(string,long,double,int,boolean,float等),那么#{}中的变量名称可以随意写，一般和属性名相同。
    java.lang.Integer也可以直接写成int
     -->
    <resultMap id="menuMap" type="Menu">
        <id column="id" property="id"></id>
        <result column="name" property="name"></result>
        <result column="price" property="price"></result>
        <result column="flavor" property="flavor"></result>
        <association property="type" select="com.lin.repository.TypeRepository.findById" column="tid"></association>
    </resultMap>

    <select id="findAll" resultMap="menuMap">
        select * from t_menu limit #{param1}, #{param2}
    </select>

    <select id="count" resultType="int">
        select count(id) from t_menu
    </select>

    <select id="findById" parameterType="long" resultMap="menuMap">
        select * from t_menu where id = #{id}
    </select>

    <insert id="save" parameterType="Menu">
        insert into t_menu(name, price, flavor, tid) values(#{name}, #{price}, #{flavor}, #{type.id})
    </insert>

    <update id="update" parameterType="Menu">
        update t_menu set name = #{name}, price = #{price}, flavor = #{flavor}, tid = #{type.id} where id = #{id}
    </update>

    <delete id="deleteById" parameterType="long">
        delete from t_menu where id = #{id}
    </delete>

    <!--
    如果返回结果为集合,可以调用selectList方法,这个方法返回的结果就是一个集合,所以映射文件中应该配置成集合泛型的类型
    ${}拼接符:字符串原样拼接,如果传入的参数是基本类型(string,long,double,int,boolean,float等),那么${}中的变量名称必须是value
    注意:拼接符有sql注入的风险,所以慎重使用
     -->

    <!--<select id="findStuByName" parameterType="java.lang.String" resultType="com.mq.pojo.Student">
        select * from students where name like '%${value}%'
    </select>-->

    <!--
    #{}:如果传入的是pojo类型,那么#{}中的变量名称必须是pojo中对应的属性，
    如果要返回数据库自增主键:可以使用select LAST_INSERT_ID()-->

    <!--<insert id="insertStu" parameterType="com.mq.pojo.Student" >
        &lt;!&ndash; 执行 select LAST_INSERT_ID()数据库函数,返回自增的主键
        keyProperty:将返回的主键放入传入参数的Id中保存.
        order:当前函数相对于insert语句的执行顺序,在insert前执行是before,在insert后执行是AFTER
        resultType:id的类型,也就是keyproperties中属性的类型
        &ndash;&gt;
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            select LAST_INSERT_ID()
        </selectKey>
        insert into students (name,sex,age,tel) values(#{name},#{sex},#{age},#{tel})
    </insert>-->





</mapper>